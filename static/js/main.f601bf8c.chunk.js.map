{"version":3,"sources":["logic/calculate.js","component/TextArea/index.js","component/Button/index.js","container/landing/index.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","numberArray","path","index","length","i","temp","j","tempIndex","push","input","match","result","forEach","item","parseInt","e","TextInput","props","handleChange","className","onBlur","target","value","defaultProps","Button","handleClick","Text","onClick","type","Landing","state","error","optimalPath","parsedArray","bind","handleInput","this","parseInput","undefined","setState","calcArray","console","log","map","key","shift","TextArea","filterPath","React","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAyDeA,E,yGAxDMC,GACjB,IAAMC,EAAO,GACPC,EAAQ,GACd,GAA2B,IAAvBF,EAAYG,QAAgBH,EAAY,IAAM,EAChD,OAAO,EAET,GAAIA,EAAYG,OAAS,GAAKH,EAAY,GACxC,MAAO,CAAC,EAAGA,EAAYG,OAAS,GAGlCF,EAAK,GAAKD,EAAY,GACtBE,EAAM,GAAK,EAEX,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAYG,QAAS,CAIvC,IAHA,IAAIE,EAAO,EACPC,EAAIF,EAAI,EACRG,EAAY,EACRD,GAAKF,EAAIH,EAAKA,EAAKE,OAAS,GAAIG,GAAK,EACvCD,EAAOL,EAAYM,KACrBD,EAAOL,EAAYM,GACnBC,EAAYD,GAGhB,GAAID,EAAO,EACT,OAAO,EAKT,GAHAJ,EAAKO,KAAKH,GACVH,EAAMM,KAAKD,GACXH,EAAIG,EACAP,EAAYG,OAAS,GAAKF,EAAKA,EAAKE,OAAS,GAAKI,EAAW,CAC/DN,EAAKO,KAAKR,EAAYA,EAAYG,OAAS,IAC3CD,EAAMM,KAAKR,EAAYG,OAAS,GAChC,OAGJ,OAAOD,I,iCAGSO,GAChB,IACMT,EAAcS,EAAMC,MADP,aAEbC,EAAS,GACf,IACE,OAAoB,OAAhBX,GACFA,EAAYY,SAAQ,SAACC,GACnBF,EAAOH,KAAKM,SAASD,EAAM,QAEtBF,GAEF,KACP,MAAOI,GACP,OAAO,U,WChDb,SAASC,EAAUC,GAAQ,IACjBC,EAAiBD,EAAjBC,aACR,OACE,8BACEC,UAAU,iBACVC,OAAQ,SAACL,GAAD,OAAOG,EAAaH,EAAEM,OAAOC,UAS3CN,EAAUO,aAAe,CACvBL,aAAc,cAGDF,Q,MClBf,SAASQ,EAAOP,GAAQ,IACdQ,EAAsBR,EAAtBQ,YAAaC,EAAST,EAATS,KACrB,OACE,4BACEC,QAAS,kBAAMF,KACfG,KAAK,SACLT,UAAU,UAETO,GAUPF,EAAOD,aAAe,CACpBE,YAAa,aACbC,KAAM,IAGOF,QCqDAK,G,kBAxEb,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CACXrB,MAAO,GAAIsB,MAAO,KAAMC,YAAa,KAAMC,YAAa,MAE1D,EAAKR,YAAc,EAAKA,YAAYS,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBANF,E,2EASJ,IACLzB,EAAU2B,KAAKN,MAAfrB,MACFwB,EAAclC,EAAWsC,WAAW5B,GAC1C,GAAoB,OAAhBwB,QAAwCK,IAAhBL,EAC1BG,KAAKG,SAAS,CAAER,MAAO,sEAAuEC,YAAa,KAAMC,YAAa,WACzH,CACL,IAAMD,EAAcjC,EAAWiC,YAAYC,GACtCD,EAGHI,KAAKG,SAAS,CAAER,MAAO,KAAMC,cAAaC,gBAF1CG,KAAKG,SAAS,CAAER,MAAO,6DAA8DC,YAAa,KAAMC,YAAa,U,kCAO/GX,GACVc,KAAKG,SAAS,CAAE9B,MAAOa,M,mCAGX,IAAD,EAC0Bc,KAAKN,MAAlCG,EADG,EACHA,YAAaD,EADV,EACUA,YACfQ,EAAS,YAAOR,GAEtB,OADAS,QAAQC,IAAIF,GACLP,EAAYU,KAAI,SAAC9B,EAAMT,GAC5B,OAAIA,IAAMoC,EAAU,GAEhB,0BAAMI,IAAKxC,GAAX,UACMS,EADN,OAKJ2B,EAAUK,QAER,0BAAMD,IAAKxC,EAAGe,UAAU,eAAxB,UACMN,EADN,Y,+BAOI,IAAD,EAGHuB,KAAKN,MADPC,EAFK,EAELA,MAAOC,EAFF,EAEEA,YAET,OACE,yBAAKb,UAAU,QACb,yBAAKA,UAAU,aACb,kBAAC2B,EAAD,CAAU5B,aAAckB,KAAKD,cAC7B,kBAAC,EAAD,CAAQT,KAAK,YAAYD,YAAaW,KAAKX,cAC1CM,EAAQ,uBAAGZ,UAAU,aAAaY,GAAa,KAC/CC,EACC,6BACE,uBAAGb,UAAU,eAAb,YACA,mEACCiB,KAAKW,cAEN,W,GAlEQC,IAAMC,YCEbC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5C,MACvB,2DCZN6C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f601bf8c.chunk.js","sourcesContent":["class Calculator {\n  static optimalPath(numberArray) {\n    const path = [];\n    const index = [];\n    if (numberArray.length === 0 || numberArray[0] <= 0) {\n      return false;\n    }\n    if (numberArray.length - 1 <= numberArray[0]) {\n      return [0, numberArray.length - 1];\n    }\n    // eslint-disable-next-line prefer-destructuring\n    path[0] = numberArray[0];\n    index[0] = 0;\n\n    for (let i = 0; i < numberArray.length;) {\n      let temp = 0;\n      let j = i + 1;\n      let tempIndex = 0;\n      for (j; j <= i + path[path.length - 1]; j += 1) {\n        if (temp < numberArray[j]) {\n          temp = numberArray[j];\n          tempIndex = j;\n        }\n      }\n      if (temp < 1) {\n        return false;\n      }\n      path.push(temp);\n      index.push(tempIndex);\n      i = tempIndex;\n      if (numberArray.length - 1 <= path[path.length - 1] + tempIndex) {\n        path.push(numberArray[numberArray.length - 1]);\n        index.push(numberArray.length - 1);\n        break;\n      }\n    }\n    return index;\n  }\n\n  static parseInput(input) {\n    const expression = /-?[0-9]+/g;\n    const numberArray = input.match(expression);\n    const result = [];\n    try {\n      if (numberArray !== null) {\n        numberArray.forEach((item) => {\n          result.push(parseInt(item, 10));\n        });\n        return result;\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport './style.css';\nimport PropTypes from 'prop-types';\n\nfunction TextInput(props) {\n  const { handleChange } = props;\n  return (\n    <textarea\n      className=\"customTextArea\"\n      onBlur={(e) => handleChange(e.target.value)}\n    />\n  );\n}\n\nTextInput.propTypes = {\n  handleChange: PropTypes.func,\n};\n\nTextInput.defaultProps = {\n  handleChange: () => {},\n};\n\nexport default TextInput;\n","import React from 'react';\nimport './style.css';\nimport PropTypes from 'prop-types';\n\nfunction Button(props) {\n  const { handleClick, Text } = props;\n  return (\n    <button\n      onClick={() => handleClick()}\n      type=\"button\"\n      className=\"button\"\n    >\n      {Text}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  handleClick: PropTypes.func,\n  Text: PropTypes.string,\n};\n\nButton.defaultProps = {\n  handleClick: () => {},\n  Text: '',\n};\n\nexport default Button;\n","/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport Calculator from '../../logic/calculate';\nimport TextArea from '../../component/TextArea';\nimport Button from '../../component/Button';\nimport './style.css';\n\nclass Landing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '', error: null, optimalPath: null, parsedArray: null,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  handleClick() {\n    const { input } = this.state;\n    const parsedArray = Calculator.parseInput(input);\n    if (parsedArray === null || parsedArray === undefined) {\n      this.setState({ error: 'Provided input was invalid, please provide a valid list of numbers.', optimalPath: null, parsedArray: null });\n    } else {\n      const optimalPath = Calculator.optimalPath(parsedArray);\n      if (!optimalPath) {\n        this.setState({ error: 'The provided array has no possible paths to reach the end.', optimalPath: null, parsedArray: null });\n      } else {\n        this.setState({ error: null, optimalPath, parsedArray });\n      }\n    }\n  }\n\n  handleInput(value) {\n    this.setState({ input: value });\n  }\n\n  filterPath() {\n    const { parsedArray, optimalPath } = this.state;\n    const calcArray = [...optimalPath];\n    console.log(calcArray);\n    return parsedArray.map((item, i) => {\n      if (i !== calcArray[0]) {\n        return (\n          <span key={i}>\n            {`${item} `}\n          </span>\n        );\n      }\n      calcArray.shift();\n      return (\n        <span key={i} className=\"successText\">\n          {`${item} `}\n        </span>\n      );\n    });\n  }\n\n  render() {\n    const {\n      error, optimalPath,\n    } = this.state;\n    return (\n      <div className=\"page\">\n        <div className=\"container\">\n          <TextArea handleChange={this.handleInput} />\n          <Button Text=\"Calculate\" handleClick={this.handleClick} />\n          {error ? <p className=\"errorText\">{error}</p> : null}\n          {optimalPath ? (\n            <div>\n              <p className=\"successText\">Success!</p>\n              <p>The optimal path is marked in green:</p>\n              {this.filterPath()}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Landing;\n","import React from 'react';\nimport Landing from './container/landing';\n\nfunction App() {\n  return (\n    <Landing />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}